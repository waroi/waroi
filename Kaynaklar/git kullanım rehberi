== Kurulum ==
[http://code.google.com/p/git-osx-installer/downloads/list?can=3 OSX için git'i İndir] 

[http://code.google.com/p/msysgit/downloads/list?can=3 Windows için git'i İndir] 

[http://book.git-scm.com/2_installing_git.html Linux için git'i İndir]

'''Pisi Linux için kurulum:'''

Openssh kurulumu:
 sudo pisi it openssh
Git kurulumu:
 sudo pisi it git

== Yeni bir depo oluşturmak ==
Yeni bir depo oluşturmak için, bir klasör oluşturup içerisinde

 <tt>git init</tt>

komutunu çalıştırın. 

== Bir depoyu kopyalamak ==
Yerel deponuzun çalışan bir kopyasını oluşturmak için

 <tt>git clone /yol/depo</tt>

uzak sunucu kullandığımız durumda

 <tt>git clone kullaniciadi@sunucu:/yol/depo</tt>

== İş akışı ==
Yerel deponuz git tarafından yönetilen üç "ağaçtan" oluşur. birincisi gerçek dosyaları tutan <tt>Çalışma Dizini</tt>. ikinci etap <tt>Stage</tt> ve sonuncusu yaptığınız son commit'i gösteren <tt>HEAD</tt>. 


[[Image:trees.png]]

== Ekleme & teslim ==
Değişiklikleri belirtmek ('''Index''''e eklemek) için

 <tt><nowiki>git add <dosyaadı></nowiki>git add *</tt>

Temel git iş akışında bu ilk adımdır. Değişiklikleri depoya eklemek için

 <tt>git commit -m "Teslim mesajı"</tt>

Şimdi dosyalar '''HEAD''''e eklendi, fakat henüz uzak deponuza değil. 

== Değişiklikleri göndermek ==
Şimdi değişiklikleriniz yerel deponuzun '''HEAD''''i içerisinde.Bu değişiklikleri uzak deponuza göndermek için,

 <tt>git push origin master</tt>

Değişiklikleri uzak deponuzdaki göndermek istediğiniz dal'ı ''master'' ile değiştirin. Henüz uzak bir deponuz yoksa ve uzak depo eklemek istiyorsanız,

 <tt><nowiki>git remote add origin <sunucu></nowiki></tt>

Şimdi değişikliklerinizi uzak sunucuya gönderebilirsiniz


== Dallar ile çalışmak ==
Dallar farklı özellikleri ayrı ayrı geliştirmek için kullanılır. Yeni bir depo oluşturduğunuzda ''master'' "varsayılan" daldır. Diğer dallar geliştirildikten sonra ''master'''a birleştirilir. 

[[Image:branches.png]] 

"feature_x" adıyla yeni bir dal oluşturup o dala geçmek için 

 <tt>git checkout -b feature_x</tt>

master'a geri geçmek için

 <tt>git checkout master</tt>

ve oluşturduğumuz dalı silmek için

 <tt>git branch -d feature_x</tt>

bir dalı uzak deponuza göndermedikçe

''başkaları tarafından kullanılabilir olmaz''

 <tt><nowiki>git push origin <dal> </nowiki></tt>


== Güncelleme & birleştirme ==
En son değişiklikleri (commit) yerel deponuza almak için

 <tt>git pull</tt>

komutunu çalıştırın. Bu değişiklikleri al ''(fetch)'' ve birleştir ''(merge)'' yapacaktır. Aktif dala (örn. master) başka bir dalı birleştirmek için 

 <tt><nowiki>git merge <dal></nowiki></tt>

her iki durumda da git değişiklikleri otomatik birleştirmeyi (auto-merge) dener. Maalesef, bu her zaman mümkün olmaz ve ''çakışmalarla (conflict)'' sonuçlanır. Git tarafından gösterilen dosyaları elle düzenleyerek bu ''çakışmaları'' birleştirmek size düşer. Değişikliklerden sonra, dosyaları eklemek için

 <tt><nowiki>git add <dosyaadı></nowiki></tt>

değişiklikleri birleştirmeden önce, önizleme yapmak için

 <tt><nowiki>git diff <kaynak_dal> <hedef_dal> </nowiki></tt>

== Sürümlemek ==
Yazılım sürümleriniz için sürüm adı (tag) oluşturmanız tavsiye edilir. bu SVN'de de mevcut olan bilindik bir kavramdır. ''1.0.0'' adıyla bir sürüm numarası (tag) oluşturmak için

 <tt>git tag 1.0.0 1b2e1d63ff</tt>

buradaki ''1b2e1d63ff'' yayımlanacak yazılım sürümünüzün işlem numarasının ilk 10 karakteridir. İşlem kimlik numaralarını görmek için

 <tt>git log</tt>

tekil olduğu sürece daha az işlem numarası da kullanabilirsiniz. 

== Yerel değişiklikleri geri almak ==
Yanlış birşey yapmanız durumunda (tabi ki böyle şeyler hiç olmaz ;) yerel değişiklikleri geri almak için

 <tt><nowiki>git checkout -- <dosyaadı></nowiki></tt>

bu değişikliklerinizi HEAD içerisindeki son içerik ile değiştirir. Index'e önceden eklenmiş değişiklikler ve yeni dosyalar korunacaktır. 

Eğer tüm yerel değişiklik ve teslimlerinizi iptal etmek istiyorsanız, sunucudan en son kayıtları getirin ve yerel master dalınıza gösterin

 <tt>git fetch origin</tt>

 <tt>git reset --hard origin/master</tt> 

== Faydalı ipuçları ==
Dahili git GUI (Grafiksel Kullanıcı Arayüzü)

 <tt>gitk</tt>

renkli git çıktısı kullanın

 <tt>git config color.ui true</tt>

commit başına sadece tek satır log gösterin

 <tt>git config format.pretty oneline</tt>

interaktif ekleme kullanın

 <tt>git add -i </tt>

== Kaynak ==

[http://rogerdudler.github.io/git-guide/index.tr.html git - basit rehber]
